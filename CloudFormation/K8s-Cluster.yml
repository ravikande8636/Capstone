Description: >
    Ravi k
    This template deploys EKS Cluster with Worker nodes and IAM roles as needed.

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    
    EKSClusterName:
        Description: EKS Cluster Name
        Type: String 
    
    K8sVersion:
        Description: Kubernetes Version
        Type: String 
    
Resources:
  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  
  ControlplaneSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "VPCID-${EnvironmentName}"
    
  myCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Ref EKSClusterName
      Version: !Ref K8sVersion
      RoleArn: 
       Fn::GetAtt:
        - EksClusterRole
        - Arn
      ResourcesVpcConfig:
        SecurityGroupIds: [!Ref 'ControlplaneSG']
        SubnetIds:
          - Fn::ImportValue: !Sub "PUB1-SN-${EnvironmentName}"
          - Fn::ImportValue: !Sub "PUB2-SN-${EnvironmentName}"
  EKSNodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSClusterName
      NodeRole: 
       Fn::GetAtt:
        - EKSNodeInstanceRole
        - Arn
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 2
      Labels:
       app: Cap-k8s
       project: Capstone
      Subnets:
        - Fn::ImportValue: !Sub "PUB1-SN-${EnvironmentName}"
        - Fn::ImportValue: !Sub "PUB2-SN-${EnvironmentName}"
    DependsOn: myCluster

Outputs:
  ClusterRoleArn:
    Description: The cluster role that Amazon EKS will use to create AWS resources
      for Kubernetes clusters
    Value:
      Fn::GetAtt:
      - EksClusterRole
      - Arn
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-ClusterRoleArn"
  NodeInstanceRole:
    Description: The worker node instance role
    Value:
      Fn::GetAtt:
      - EKSNodeInstanceRole
      - Arn
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-NodeInstanceRoleArn"
  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker
      nodes
    Value:
      Fn::Join:
      - ","
      - - Ref: ControlplaneSG
    Export:
      Name:
        Fn::Sub: "${EnvironmentName}-ControlPlaneSecurityGroupId"
   
